#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.2
#  in conjunction with Tcl version 8.6
#    May 13, 2020 08:53:55 PM IST  platform: Windows NT

import sys
from tkinter.messagebox import *
import mysql.connector

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

import myMall2_support


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1(root)
    myMall2_support.init(root, top)
    root.mainloop()


w = None


def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    # rt = root
    root = rt
    w = tk.Toplevel(root)
    top = Toplevel1(w)
    myMall2_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_Toplevel1():
    global w
    w.destroy()
    w = None


class Toplevel1:
    __flag = 0

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        font9 = "-family {Century751 No2 BT} -size 15 -weight bold " \
                "-underline 1"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])

        top.geometry("510x518+370+114")
        top.minsize(120, 1)
        top.maxsize(1370, 749)
        top.resizable(1, 1)
        top.title("New Toplevel")
        top.configure(background="#b6fcfa")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.314, rely=0.019, height=31, width=173)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#b6fcfa")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="-family {Cooper Black} -size 20 -underline 1")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''My Mall''')

        self.TFrame1 = ttk.Frame(top)
        self.TFrame1.place(relx=0.039, rely=0.135, relheight=0.241
                           , relwidth=0.206)
        self.TFrame1.configure(relief='groove')
        self.TFrame1.configure(borderwidth="2")
        self.TFrame1.configure(relief="groove")

        self.TLabel1 = ttk.Label(self.TFrame1)
        self.TLabel1.place(relx=0.095, rely=0.368, height=18, width=76)
        self.TLabel1.configure(background="#d9d9d9")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(font="TkDefaultFont")
        self.TLabel1.configure(relief="flat")
        self.TLabel1.configure(anchor='w')
        self.TLabel1.configure(justify='left')
        self.TLabel1.configure(text='''Dell Keyboard''')

        self.TLabel2 = ttk.Label(self.TFrame1)
        self.TLabel2.place(relx=0.19, rely=0.52, height=18, width=50)
        self.TLabel2.configure(background="#d9d9d9")
        self.TLabel2.configure(foreground="#000000")
        self.TLabel2.configure(font="TkDefaultFont")
        self.TLabel2.configure(relief="flat")
        self.TLabel2.configure(anchor='w')
        self.TLabel2.configure(justify='left')
        self.TLabel2.configure(text='''Rs. 500''')

        self.addcart = ttk.Button(self.TFrame1)
        self.addcart.place(relx=0.095, rely=0.664, height=25, width=76)
        self.addcart.configure(takefocus="")
        self.addcart.configure(text='''Add to Cart''', command=lambda: self.insert_items("Dell Keyboard", 500))

        self.Label2 = tk.Label(self.TFrame1)
        self.Label2.place(relx=0.067, rely=0.072, height=29, width=89)
        self.Label2.configure(background="#6363eb")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(text='''Dell''')

        self.TFrame1_1 = ttk.Frame(top)
        self.TFrame1_1.place(relx=2.39, rely=1.088, relheight=1.0, relwidth=1.0)

        self.Label2_5 = tk.Label(self.TFrame1_1)
        self.Label2_5.place(relx=0.067, rely=0.072, height=29, width=79)
        self.Label2_5.configure(activebackground="#f9f9f9")
        self.Label2_5.configure(activeforeground="black")
        self.Label2_5.configure(background="#6363eb")
        self.Label2_5.configure(disabledforeground="#a3a3a3")
        self.Label2_5.configure(foreground="#000000")
        self.Label2_5.configure(highlightbackground="#d9d9d9")
        self.Label2_5.configure(highlightcolor="black")
        self.Label2_5.configure(text='''Dell''')

        self.style.configure('Treeview', font="TkDefaultFont")
        self.Scrolledtreeview1 = ScrolledTreeView(top)
        self.Scrolledtreeview1.place(relx=0.078, rely=0.483, relheight=0.284
                                     , relwidth=0.824)
        self.Scrolledtreeview1.configure(columns=("Col1", "Col2", "Col3"))
        # build_treeview_support starting.
        self.Scrolledtreeview1.heading("#0", text="Product Name")
        self.Scrolledtreeview1.heading("#0", anchor="center")
        self.Scrolledtreeview1.column("#0", width="150")
        self.Scrolledtreeview1.column("#0", minwidth="20")
        self.Scrolledtreeview1.column("#0", stretch="1")
        self.Scrolledtreeview1.column("#0", anchor="center")
        self.Scrolledtreeview1.heading("Col1", text="Price")
        self.Scrolledtreeview1.heading("Col1", anchor="center")
        self.Scrolledtreeview1.column("Col1", width="90")
        self.Scrolledtreeview1.column("Col1", minwidth="20")
        self.Scrolledtreeview1.column("Col1", stretch="1")
        self.Scrolledtreeview1.column("Col1", anchor="center")
        self.Scrolledtreeview1.heading("Col2", text="Quantity")
        self.Scrolledtreeview1.heading("Col2", anchor="center")
        self.Scrolledtreeview1.column("Col2", width="70")
        # self.Scrolledtreeview1.column("Col2", minwidth="20")
        self.Scrolledtreeview1.column("Col2", stretch="1")
        self.Scrolledtreeview1.column("Col2", anchor="center")
        self.Scrolledtreeview1.heading("Col3", text="Amount")
        self.Scrolledtreeview1.heading("Col3", anchor="center")
        self.Scrolledtreeview1.column("Col3", width=" 103")
        # self.Scrolledtreeview1.column("Col3", minwidth="20")
        self.Scrolledtreeview1.column("Col3", stretch="1")
        self.Scrolledtreeview1.column("Col3", anchor="center")

        self.TLabel3 = ttk.Label(top)
        self.TLabel3.place(relx=0.294, rely=0.405, height=29, width=209)
        self.TLabel3.configure(background="#b6fcfa")
        self.TLabel3.configure(foreground="#000000")
        self.TLabel3.configure(font=font9)
        self.TLabel3.configure(relief="flat")
        self.TLabel3.configure(anchor='w')
        self.TLabel3.configure(justify='left')
        self.TLabel3.configure(text='''Product Description''')

        self.delete = ttk.Button(top)
        self.delete.place(relx=0.078, rely=0.772, height=25, width=140)
        self.delete.configure(takefocus="")
        self.delete.configure(text='''Delete''', command=self.delete_data)

        self.TFrame2 = ttk.Frame(top)
        self.TFrame2.place(relx=0.275, rely=0.135, relheight=0.241
                           , relwidth=0.206)
        self.TFrame2.configure(relief='groove')
        self.TFrame2.configure(borderwidth="2")
        self.TFrame2.configure(relief="groove")

        self.TLabel4 = ttk.Label(self.TFrame2)
        self.TLabel4.place(relx=0.095, rely=0.08, height=29, width=80)
        self.TLabel4.configure(background="#6363eb")
        self.TLabel4.configure(foreground="#000000")
        self.TLabel4.configure(font="TkDefaultFont")
        self.TLabel4.configure(relief="flat")
        self.TLabel4.configure(anchor='w')
        self.TLabel4.configure(justify='left')
        self.TLabel4.configure(text='''HP''')

        self.TLabel5 = ttk.Label(self.TFrame2)
        self.TLabel5.place(relx=0.19, rely=0.32, height=19, width=59)
        self.TLabel5.configure(background="#d9d9d9")
        self.TLabel5.configure(foreground="#000000")
        self.TLabel5.configure(font="TkDefaultFont")
        self.TLabel5.configure(relief="flat")
        self.TLabel5.configure(anchor='w')
        self.TLabel5.configure(justify='left')
        self.TLabel5.configure(text='''Hp Mouse''')

        self.TLabel6 = ttk.Label(self.TFrame2)
        self.TLabel6.place(relx=0.286, rely=0.48, height=19, width=40)
        self.TLabel6.configure(background="#d9d9d9")
        self.TLabel6.configure(foreground="#000000")
        self.TLabel6.configure(font="TkDefaultFont")
        self.TLabel6.configure(relief="flat")
        self.TLabel6.configure(anchor='w')
        self.TLabel6.configure(justify='left')
        self.TLabel6.configure(text='''Rs. 300''')

        self.addcart2 = ttk.Button(self.TFrame2)
        self.addcart2.place(relx=0.095, rely=0.64, height=25, width=76)
        self.addcart2.configure(takefocus="")
        self.addcart2.configure(text='''Add to Cart''', command=lambda: self.insert_items("HP Mouse", 300))

        self.TFrame3 = ttk.Frame(top)
        self.TFrame3.place(relx=0.51, rely=0.135, relheight=0.241
                           , relwidth=0.206)
        self.TFrame3.configure(relief='groove')
        self.TFrame3.configure(borderwidth="2")
        self.TFrame3.configure(relief="groove")

        self.TLabel7 = ttk.Label(self.TFrame3)
        self.TLabel7.place(relx=0.095, rely=0.08, height=29, width=83)
        self.TLabel7.configure(background="#6363eb")
        self.TLabel7.configure(foreground="#000000")
        self.TLabel7.configure(font="TkDefaultFont")
        self.TLabel7.configure(relief="flat")
        self.TLabel7.configure(anchor='w')
        self.TLabel7.configure(justify='left')
        self.TLabel7.configure(text='''Lenovo''')

        self.TLabel9 = ttk.Label(self.TFrame3)
        self.TLabel9.place(relx=0.095, rely=0.32, height=19, width=86)
        self.TLabel9.configure(background="#d9d9d9")
        self.TLabel9.configure(foreground="#000000")
        self.TLabel9.configure(font="TkDefaultFont")
        self.TLabel9.configure(relief="flat")
        self.TLabel9.configure(anchor='w')
        self.TLabel9.configure(justify='left')
        self.TLabel9.configure(text='''Lenovo printer''')

        self.TLabel10 = ttk.Label(self.TFrame3)
        self.TLabel10.place(relx=0.286, rely=0.48, height=19, width=55)
        self.TLabel10.configure(background="#d9d9d9")
        self.TLabel10.configure(foreground="#000000")
        self.TLabel10.configure(font="TkDefaultFont")
        self.TLabel10.configure(relief="flat")
        self.TLabel10.configure(anchor='w')
        self.TLabel10.configure(justify='left')
        self.TLabel10.configure(text='''Rs. 7000''')

        self.addcart3 = ttk.Button(self.TFrame3)
        self.addcart3.place(relx=0.19, rely=0.64, height=25, width=76)
        self.addcart3.configure(takefocus="")
        self.addcart3.configure(text='''Add to Cart''', command=lambda: self.insert_items("Lenovo Printer", 7000))

        self.TFrame4 = ttk.Frame(top)
        self.TFrame4.place(relx=0.745, rely=0.135, relheight=0.241
                           , relwidth=0.206)
        self.TFrame4.configure(relief='groove')
        self.TFrame4.configure(borderwidth="2")
        self.TFrame4.configure(relief="groove")

        self.TLabel8 = ttk.Label(self.TFrame4)
        self.TLabel8.place(relx=0.095, rely=0.08, height=29, width=85)
        self.TLabel8.configure(background="#6363eb")
        self.TLabel8.configure(foreground="#000000")
        self.TLabel8.configure(font="TkDefaultFont")
        self.TLabel8.configure(relief="flat")
        self.TLabel8.configure(anchor='w')
        self.TLabel8.configure(justify='left')
        self.TLabel8.configure(text='''Apple''')

        self.addcart4 = ttk.Button(self.TFrame4)
        self.addcart4.place(relx=0.19, rely=0.64, height=25, width=76)
        self.addcart4.configure(takefocus="")
        self.addcart4.configure(text='''Add to Cart''', command=lambda: self.insert_items("Apple Mouse", 3500))

        self.TLabel12 = ttk.Label(self.TFrame4)
        self.TLabel12.place(relx=0.286, rely=0.48, height=19, width=46)
        self.TLabel12.configure(background="#d9d9d9")
        self.TLabel12.configure(foreground="#000000")
        self.TLabel12.configure(font="TkDefaultFont")
        self.TLabel12.configure(relief="flat")
        self.TLabel12.configure(anchor='w')
        self.TLabel12.configure(justify='left')
        self.TLabel12.configure(text='''Rs. 3500''')

        self.TLabel11 = ttk.Label(self.TFrame4)
        self.TLabel11.place(relx=0.19, rely=0.32, height=19, width=74)
        self.TLabel11.configure(background="#d9d9d9")
        self.TLabel11.configure(foreground="#000000")
        self.TLabel11.configure(font="TkDefaultFont")
        self.TLabel11.configure(relief="flat")
        self.TLabel11.configure(anchor='w')
        self.TLabel11.configure(justify='left')
        self.TLabel11.configure(text='''Apple mouse''')

        self.proceed = ttk.Button(top)
        self.proceed.place(relx=0.353, rely=0.869, height=35, width=166)
        self.proceed.configure(takefocus="")
        self.proceed.configure(text='''proceed''', command=self.proceed_item)

        self.canOrder = ttk.Button(top)
        self.canOrder.place(relx=0.647, rely=0.772, height=25, width=126)
        self.canOrder.configure(takefocus="")
        self.canOrder.configure(text='''Cancel Order''')

        self.bill = ttk.Button(top)
        self.bill.place(relx=0.353, rely=0.772, height=25, width=150)
        self.bill.configure(takefocus="")
        self.bill.configure(text='''Total Bill''', command=self.total_bill)

    def delete_data(self):
        pos = self.Scrolledtreeview1.focus()
        if pos:
            self.Scrolledtreeview1.delete(pos)

        elif not self.Scrolledtreeview1.get_children():
            showwarning("Warning", "Cart is Empty")
        else:
            showwarning("Warning", "Please Select Any Column")

    def insert_items(self, name, price):
        a = name
        b = price
        i = 0
        for line in self.Scrolledtreeview1.get_children():
            if a == self.Scrolledtreeview1.item(line)["text"]:
                value = self.Scrolledtreeview1.item(line)["values"][0]
                qty = self.Scrolledtreeview1.item(line)["values"][1] + 1
                amount = int(value) * int(qty)

                self.Scrolledtreeview1.insert('', i, text=a, values=(value, qty, amount))

                self.Scrolledtreeview1.delete(line)
                break
            i += 1
        else:

            self.Scrolledtreeview1.insert('', tk.END, text=a, values=(b, 1, b))

    def total_bill(self):
        # value = 0
        # qty = 0
        amount = 0
        for line in self.Scrolledtreeview1.get_children():
            value = self.Scrolledtreeview1.item(line)["values"][0]
            qty = self.Scrolledtreeview1.item(line)["values"][1]
            amount += int(value) * int(qty)
        showinfo("Total Bill", "Total Bill is {}".format(amount))

    def proceed_item(self):
        try:
            con = mysql.connector.connect(host='localhost', user='root', passwd='', database='order_system')

            cursor = con.cursor()

            for line in self.Scrolledtreeview1.get_children():
                p_name = self.Scrolledtreeview1.item(line)["text"]
                p_price = str(self.Scrolledtreeview1.item(line)["values"][0])
                p_qty = str(self.Scrolledtreeview1.item(line)["values"][1])
                p_amount = str(self.Scrolledtreeview1.item(line)["values"][2])
                #sql = "insert into orders (product name,product price,product quantity,amount) values('%s','%s',%s,'%s')"\
                     # % (p_name, p_price, p_qty, p_amount)
                sql = "insert into purchase (name,price,qty,amount) values('%s','%s',%s,'%s')" % (
                p_name, p_price,p_qty, p_amount)

                cursor.execute(sql)
                con.commit()
            if cursor.rowcount > 0:
                ask = showinfo('success', 'record inserted')
                if ask == OK:
                    self.Scrolledtreeview1.delete(*self.Scrolledtreeview1.get_children())
            cursor.close()
            con.close()
        except Exception as e:
            showinfo('Warning', e)



# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                      | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                      + tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''

        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)

        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''

    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)

    return wrapped


class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''

    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)


import platform


def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))


def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')


def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')


def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')


if __name__ == '__main__':
    vp_start_gui()
